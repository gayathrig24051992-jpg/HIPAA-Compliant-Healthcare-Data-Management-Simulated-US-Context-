# -*- coding: utf-8 -*-
"""hipaa_streamlit_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/182harZLvaO_7URSJElNRCtux641wrBR4
"""

import streamlit as st
import pandas as pd
import numpy as np
from faker import Faker
import random
from datetime import datetime, timedelta
import hashlib
from cryptography.fernet import Fernet
import matplotlib.pyplot as plt
import seaborn as sns

st.set_page_config(page_title="HIPAA-Compliant Healthcare Data Management", layout="wide")

# -- Project Title and Introduction --
st.title("HIPAA-Compliant Healthcare Data Management (Simulated US Context)")
st.markdown("""
_Goal: To demonstrate fundamental principles of HIPAA compliance, including Protected Health Information (PHI) privacy, security, consent, and basic audit trails, within a simulated US healthcare data environment using Streamlit._
""")
st.info("This is a simplified demonstration. Real-world HIPAA-compliant systems require robust, enterprise-grade solutions.")

# -- Step 0: Understanding HIPAA Fundamentals --
with st.expander("Understanding HIPAA Fundamentals"):
    st.markdown("""
    HIPAA is the cornerstone of US healthcare data privacy and security. Key aspects include:
    - **Protected Health Information (PHI):** Individually identifiable health information.
    - **Minimum Necessary Rule:** Use or disclose only the minimum necessary PHI.
    - **Privacy Rule:** Sets national standards for the protection of PHI.
    - **Security Rule:** Sets national standards for the security of electronic PHI (ePHI).
    - **De-identification:** The process of removing or obscuring PHI so that it cannot be used to identify an individual.
    """)

# -- Data Simulation Function --
@st.cache_data
def generate_simulated_healthcare_data_us(num_records=100):
    fake = Faker('en_US')
    data = []
    for i in range(num_records):
        patient_id = f"MRN{100000 + i:05d}"
        ssn = fake.ssn()
        name = fake.name()
        dob = fake.date_of_birth(minimum_age=1, maximum_age=95)
        gender = random.choice(['Male', 'Female', 'Other'])
        address = fake.address().replace('\n', ', ')
        phone = fake.phone_number()
        email = fake.email()
        health_plan_id = f"HPID{random.randint(10000, 99999)}"
        admission_date = fake.date_between(start_date='-5y', end_date='today')
        discharge_date = admission_date + timedelta(days=random.randint(1, 15)) if random.random() > 0.3 else None
        blood_group = random.choice(['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'])
        diagnosis = random.choice([
            'Hypertension', 'Type 2 Diabetes', 'Coronary Artery Disease', 'Asthma',
            'Chronic Kidney Disease', 'Depression', 'Obesity', 'Osteoarthritis',
            'Influenza', 'COVID-19'
        ])
        medication = random.choice([
            'Lisinopril', 'Metformin', 'Aspirin', 'Albuterol',
            'Losartan', 'Sertraline', 'Orlistat', 'Celecoxib', 'Tamiflu', 'Paxlovid'
        ])
        lab_results = {
            'Glucose': random.uniform(70, 150),
            'Cholesterol': random.uniform(150, 250),
            'BP_Systolic': random.randint(100, 180),
            'BP_Diastolic': random.randint(60, 120)
        }
        consent_for_treatment = True
        consent_for_research_sharing = random.choice([True, False])
        consent_for_marketing = random.choice([True, False])
        data.append({
            'PatientID_MRN': patient_id, 'SSN': ssn, 'Name': name, 'DateOfBirth': dob,
            'Gender': gender, 'Address': address, 'Phone': phone, 'Email': email,
            'HealthPlanID': health_plan_id, 'BloodGroup': blood_group, 'Diagnosis': diagnosis,
            'Medication': medication, 'LabResults': lab_results, 'AdmissionDate': admission_date,
            'DischargeDate': discharge_date, 'ConsentForTreatment': consent_for_treatment,
            'ConsentForResearchSharing': consent_for_research_sharing,
            'ConsentForMarketing': consent_for_marketing
        })
    return pd.DataFrame(data)

# -- Data De-identification Function --
def de_identify_safe_harbor(dataframe):
    df_de_identified = dataframe.copy()
    identifiers_to_remove = [
        'PatientID_MRN', 'SSN', 'Name', 'Address', 'Phone', 'Email', 'HealthPlanID'
    ]
    df_de_identified = df_de_identified.drop(columns=[col for col in identifiers_to_remove if col in df_de_identified.columns])
    date_cols = ['DateOfBirth', 'AdmissionDate', 'DischargeDate']
    for col in date_cols:
        if col in df_de_identified.columns:
            df_de_identified[col] = pd.to_datetime(df_de_identified[col], errors='coerce')
    if 'DateOfBirth' in df_de_identified.columns:
        def process_dob_for_deid(dob):
            if pd.isna(dob) or not isinstance(dob, pd.Timestamp):
                return None
            age = datetime.now().year - dob.year
            return '90+' if age > 89 else dob.year
        df_de_identified['YearOfBirth_Deidentified'] = df_de_identified['DateOfBirth'].apply(process_dob_for_deid)
        df_de_identified = df_de_identified.drop(columns=['DateOfBirth'])
    if 'AdmissionDate' in df_de_identified.columns:
        df_de_identified['AdmissionYear_Deidentified'] = df_de_identified['AdmissionDate'].dt.year
        df_de_identified = df_de_identified.drop(columns=['AdmissionDate'])
    if 'DischargeDate' in df_de_identified.columns:
        df_de_identified['DischargeYear_Deidentified'] = df_de_identified['DischargeDate'].dt.year
        df_de_identified = df_de_identified.drop(columns=['DischargeDate'])
    return df_de_identified

# -- Main App Logic --
st.header("1. Data Simulation")
num_records = st.slider("Number of records to simulate:", 10, 500, 200)
if st.button("Generate Simulated Data"):
    df = generate_simulated_healthcare_data_us(num_records)
    st.session_state['original_df'] = df
    st.success(f"Generated {len(df)} records.")

if 'original_df' in st.session_state:
    df = st.session_state['original_df']
    if st.checkbox("Show Original Simulated Data (Contains PHI)"):
        st.dataframe(df)

    # -- Step 3: De-identification --
    st.header("2. De-identification (Safe Harbor Method)")
    st.markdown("This section demonstrates how to remove the 18 HIPAA identifiers from the dataset.")
    df_de_identified = de_identify_safe_harbor(df)
    st.dataframe(df_de_identified)
    st.markdown(f"**Original Columns:** {', '.join(df.columns.tolist())}")
    st.markdown(f"**De-identified Columns:** {', '.join(df_de_identified.columns.tolist())}")

    # -- Step 4: Consent Management --
    st.header("3. Consent Management")
    st.markdown("This section filters data based on simulated patient consent.")
    if st.checkbox("Show De-identified Records with Consent for Research Sharing"):
        df_research_data_consented = df_de_identified[df_de_identified['ConsentForResearchSharing'] == True]
        st.write(f"Found **{len(df_research_data_consented)}** records with consent.")
        st.dataframe(df_research_data_consented[['YearOfBirth_Deidentified', 'Diagnosis', 'ConsentForResearchSharing']])
    if st.checkbox("Show PHI Records with Consent for Marketing"):
        df_marketing_consented_phi = df[df['ConsentForMarketing'] == True]
        st.write(f"Found **{len(df_marketing_consented_phi)}** records with consent.")
        st.dataframe(df_marketing_consented_phi[['PatientID_MRN', 'Name', 'Email', 'ConsentForMarketing']])

    # -- Step 5 & 6: Audit & Access Control (Conceptual) --
    st.header("4. Audit & Access Control (Conceptual)")
    with st.expander("Simulated Access Attempts and Audit Log"):
        audit_log_hipaa = []
        def log_ephi_access(user_id, action, patient_mrn=None, data_accessed=None, status="Success", purpose=""):
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            log_entry = {
                'Timestamp': timestamp, 'UserID': user_id, 'Action': action,
                'PatientMRN': patient_mrn, 'DataAccessed': data_accessed,
                'Status': status, 'Purpose': purpose
            }
            audit_log_hipaa.append(log_entry)

        user_permissions = {
            'Dr. Green (Physician)': ['access_patient_chart'],
            'Research_Analyst_X': ['access_de_identified_data'],
            'Sarah (Billing Clerk)': ['access_billing_info']
        }
        def can_access(user, data_type, patient_mrn=None, purpose=""):
            if user not in user_permissions or data_type not in user_permissions[user]:
                log_ephi_access(user, f"Attempt access to {data_type}", patient_mrn, status="Denied - Unauthorized", purpose=purpose)
                return False
            log_ephi_access(user, f"Access {data_type}", patient_mrn, status="Success", purpose=purpose)
            return True

        # Simulate and log accesses
        if st.button("Run Simulated Access Checks"):
            st.write("Running simulated checks...")
            current_patient_mrn = df.iloc[5]['PatientID_MRN']
            if can_access('Dr. Green (Physician)', 'access_patient_chart', current_patient_mrn, 'Treatment'):
                st.write(f"✅ Dr. Green accessed patient {current_patient_mrn} chart successfully.")
            if can_access('Research_Analyst_X', 'access_patient_chart', current_patient_mrn, 'Research'):
                st.write(f"❌ Researcher X accessed patient {current_patient_mrn} chart (should be denied).")
            else:
                st.write(f"✅ Researcher X was denied access to patient {current_patient_mrn} chart (Correct).")
            if can_access('Sarah (Billing Clerk)', 'access_billing_info', current_patient_mrn, 'Claim Processing'):
                st.write(f"✅ Sarah accessed billing info for patient {current_patient_mrn} successfully.")

            st.subheader("Simulated HIPAA Audit Log")
            st.dataframe(pd.DataFrame(audit_log_hipaa))

    # -- Encryption (Conceptual) --
    st.header("5. Encryption (Conceptual)")
    st.markdown("A simple demonstration of data encryption, a key technical safeguard.")
    key = Fernet.generate_key()
    cipher_suite = Fernet(key)
    def encrypt_data(data):
        return cipher_suite.encrypt(data.encode())
    def decrypt_data(encrypted_data):
        return cipher_suite.decrypt(encrypted_data).decode()
    sensitive_data_example = "Patient SSN: 123-45-6789"
    encrypted_example = encrypt_data(sensitive_data_example)
    col1, col2 = st.columns(2)
    with col1:
        st.write("Original Data:")
        st.code(sensitive_data_example)
    with col2:
        st.write("Encrypted Data:")
        st.code(encrypted_example)
    st.write(f"Decrypted data: {decrypt_data(encrypted_example)}")

    # -- Step 7: Basic Reporting & Visualization --
    st.header("6. Compliance Dashboard Idea")
    st.markdown("Visualizing consent rates and audit log activity.")
    st.subheader("Consent Rates")
    col1, col2 = st.columns(2)
    with col1:
        st.write("Percentage of Patients Consenting to Research Sharing")
        consent_research_counts = df['ConsentForResearchSharing'].value_counts(normalize=True) * 100
        fig, ax = plt.subplots(figsize=(6, 4))
        sns.barplot(x=consent_research_counts.index, y=consent_research_counts.values, palette='viridis', ax=ax)
        ax.set_xlabel('Consent Given')
        ax.set_ylabel('Percentage (%)')
        ax.set_xticks(ticks=[0, 1], labels=['No', 'Yes'])
        ax.set_ylim(0, 100)
        st.pyplot(fig)

    with col2:
        st.write("Percentage of Patients Consenting to Marketing Communications")
        consent_marketing_counts = df['ConsentForMarketing'].value_counts(normalize=True) * 100
        fig, ax = plt.subplots(figsize=(6, 4))
        sns.barplot(x=consent_marketing_counts.index, y=consent_marketing_counts.values, palette='plasma', ax=ax)
        ax.set_xlabel('Consent Given')
        ax.set_ylabel('Percentage (%)')
        ax.set_xticks(ticks=[0, 1], labels=['No', 'Yes'])
        ax.set_ylim(0, 100)
        st.pyplot(fig)

    if audit_log_hipaa:
        st.subheader("Audit Log Activity")
        audit_df_hipaa = pd.DataFrame(audit_log_hipaa)
        action_status_counts = audit_df_hipaa.groupby(['Action', 'Status']).size().unstack(fill_value=0)
        st.dataframe(action_status_counts)
        fig, ax = plt.subplots(figsize=(10, 6))
        action_status_counts.plot(kind='bar', ax=ax, colormap='RdYlGn')
        ax.set_title('Distribution of Actions and Their Status in Audit Log')
        ax.set_xlabel('Action')
        ax.set_ylabel('Count')
        ax.tick_params(axis='x', rotation=45)
        st.pyplot(fig)